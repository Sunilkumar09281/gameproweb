import React, { useState, useEffect, useRef } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, collection, onSnapshot, getDoc, getDocs } from 'firebase/firestore';
import { MailOpen, MousePointerClick, Mail, MessageSquareText, Ban, Send } from 'lucide-react'; // Import icons

// Define global variables for Firebase config and app ID
// These are provided by the Canvas environment
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

function App() {
    const [activeTab, setActiveTab] = useState('campaign-analytics');
    const [userId, setUserId] = useState('Loading...');
    const [openedEmails, setOpenedEmails] = useState([]);
    const [clickedEmails, setClickedEmails] = useState([]);
    const [receivedEmails, setReceivedEmails] = useState([]); // This will also represent "total mails sent"
    const [repliedEmails, setRepliedEmails] = useState([]);
    const [bouncedEmails, setBouncedEmails] = useState([]);
    const [message, setMessage] = useState({ text: '', type: '' });

    // State for the dynamically displayed table
    const [displayedDetails, setDisplayedDetails] = useState([]);
    const [displayedDetailsTitle, setDisplayedDetailsTitle] = useState('');

    // States for campaign selection and search
    const [campaigns, setCampaigns] = useState([]);
    const [filteredCampaigns, setFilteredCampaigns] = useState([]);
    const [selectedCampaignId, setSelectedCampaignId] = useState('');
    const [selectedCampaignName, setSelectedCampaignName] = useState('Select a Campaign');
    const [searchQuery, setSearchQuery] = useState('');


    // Refs for Firebase instances
    const dbRef = useRef(null);
    const authRef = useRef(null);

    // Function to show messages in the message box
    const showMessage = (text, type = 'info') => {
        setMessage({ text, type });
        setTimeout(() => {
            setMessage({ text: '', type: '' });
        }, 3000); // Hide after 3 seconds
    };

    // Initialize Firebase and set up authentication
    useEffect(() => {
        const initializeFirebase = async () => {
            try {
                if (Object.keys(firebaseConfig).length === 0) {
                    console.error("Firebase config is missing. Cannot initialize Firebase.");
                    showMessage("Firebase configuration error. Please check the environment.", "error");
                    return;
                }
                const app = initializeApp(firebaseConfig);
                dbRef.current = getFirestore(app);
                authRef.current = getAuth(app);

                onAuthStateChanged(authRef.current, async (user) => {
                    if (user) {
                        setUserId(user.uid);
                        console.log("User authenticated:", user.uid);
                    } else {
                        console.log("No user signed in. Attempting anonymous sign-in or custom token sign-in.");
                        try {
                            if (initialAuthToken) {
                                await signInWithCustomToken(authRef.current, initialAuthToken);
                                console.log("Signed in with custom token.");
                            } else {
                                await signInAnonymously(authRef.current);
                                console.log("Signed in anonymously.");
                            }
                        } catch (error) {
                            console.error("Error during authentication:", error);
                            showMessage(`Authentication failed: ${error.message}`, "error");
                        }
                    }
                });
            } catch (error) {
                console.error("Error initializing Firebase app:", error);
                showMessage(`Firebase initialization failed: ${error.message}`, "error");
            }
        };

        initializeFirebase();
    }, []); // Run only once on component mount

    // Function to generate dummy campaign data
    const generateDummyCampaigns = async () => {
        const publicCampaignsCollectionRef = collection(dbRef.current, `artifacts/${appId}/public/data/campaigns`);
        const campaignNames = [
            "Spring Newsletter 2024", "Product Launch Q1", "Holiday Sale Blast", "Customer Loyalty Program",
            "Webinar Series Promotion", "New Feature Announcement", "Feedback Survey Campaign",
            "Abandoned Cart Reminder", "Welcome Series Emails", "Re-engagement Campaign",
            "Black Friday Deals", "Cyber Monday Offers", "New Year Resolutions", "Summer Collection Launch",
            "Back to School Promo", "Autumn Deals", "Winter Wonderland Sale", "Spring Cleaning Tips",
            "Flash Sale Alert", "Exclusive Member Discount", "Early Bird Access", "Birthday Special",
            "Anniversary Celebration", "Referral Program Invite", "App Download Prompt"
        ];

        const existingCampaignsSnapshot = await getDocs(publicCampaignsCollectionRef);
        if (!existingCampaignsSnapshot.empty) {
            console.log("Campaigns already exist. Skipping dummy data generation.");
            return;
        }

        for (let i = 0; i < campaignNames.length; i++) {
            const campaignId = `campaign-${i + 1}`;
            const campaignName = campaignNames[i];
            const dummyInteractions = [
                { email: `user${i * 3 + 1}@example.com`, firstName: `First${i * 3 + 1}`, lastName: `Last${i * 3 + 1}`, type: 'received', timestamp: new Date(Date.now() - Math.random() * 86400000 * 30).toISOString() },
                { email: `user${i * 3 + 1}@example.com`, firstName: `First${i * 3 + 1}`, lastName: `Last${i * 3 + 1}`, type: 'opened', timestamp: new Date(Date.now() - Math.random() * 86400000 * 20).toISOString() },
                { email: `user${i * 3 + 2}@example.com`, firstName: `First${i * 3 + 2}`, lastName: `Last${i * 3 + 2}`, type: 'received', timestamp: new Date(Date.now() - Math.random() * 86400000 * 30).toISOString() },
                { email: `user${i * 3 + 2}@example.com`, firstName: `First${i * 3 + 2}`, lastName: `Last${i * 3 + 2}`, type: 'clicked', timestamp: new Date(Date.now() - Math.random() * 86400000 * 10).toISOString() },
                { email: `user${i * 3 + 3}@example.com`, firstName: `First${i * 3 + 3}`, lastName: `Last${i * 3 + 3}`, type: 'received', timestamp: new Date(Date.now() - Math.random() * 86400000 * 30).toISOString() },
                { email: `user${i * 3 + 3}@example.com`, firstName: `First${i * 3 + 3}`, lastName: `Last${i * 3 + 3}`, type: 'bounced', timestamp: new Date(Date.now() - Math.random() * 86400000 * 5).toISOString() },
            ];

            await setDoc(doc(publicCampaignsCollectionRef, campaignId), {
                campaignName: campaignName,
                totalRecipients: dummyInteractions.filter(int => int.type === 'received').length,
                interactions: dummyInteractions
            });
        }
        console.log("Dummy campaigns generated.");
        showMessage("Dummy campaigns generated successfully!", "success");
    };

    // Fetch list of campaigns
    useEffect(() => {
        if (!dbRef.current || userId === 'Loading...') {
            return;
        }

        const publicCampaignsCollectionRef = collection(dbRef.current, `artifacts/${appId}/public/data/campaigns`);

        const unsubscribe = onSnapshot(publicCampaignsCollectionRef, (snapshot) => {
            const fetchedCampaigns = [];
            snapshot.forEach(doc => {
                fetchedCampaigns.push({ id: doc.id, name: doc.data().campaignName });
            });
            setCampaigns(fetchedCampaigns);

            // If no campaign is selected and campaigns are available, select the first one
            if (!selectedCampaignId && fetchedCampaigns.length > 0) {
                setSelectedCampaignId(fetchedCampaigns[0].id);
                setSelectedCampaignName(fetchedCampaigns[0].name);
            } else if (selectedCampaignId && !fetchedCampaigns.find(c => c.id === selectedCampaignId)) {
                // If previously selected campaign is no longer available, reset
                setSelectedCampaignId('');
                setSelectedCampaignName('Select a Campaign');
                setOpenedEmails([]);
                setClickedEmails([]);
                setReceivedEmails([]);
                setRepliedEmails([]);
                setBouncedEmails([]);
                setDisplayedDetails([]);
                setDisplayedDetailsTitle('');
            }
        }, (error) => {
            console.error("Error fetching campaigns list:", error);
            showMessage(`Error fetching campaigns list: ${error.message}`, "error");
        });

        // Attempt to generate dummy campaigns if none exist
        generateDummyCampaigns();

        return () => unsubscribe();
    }, [dbRef.current, userId, selectedCampaignId]);

    // Filter campaigns based on search query
    useEffect(() => {
        const lowerCaseQuery = searchQuery.toLowerCase();
        const filtered = campaigns.filter(campaign =>
            campaign.name.toLowerCase().includes(lowerCaseQuery)
        );
        setFilteredCampaigns(filtered);
    }, [searchQuery, campaigns]);


    // Setup Firestore listener for the selected campaign's data
    useEffect(() => {
        if (!dbRef.current || !selectedCampaignId) {
            // Wait until db and a campaign is selected
            setOpenedEmails([]);
            setClickedEmails([]);
            setReceivedEmails([]);
            setRepliedEmails([]);
            setBouncedEmails([]);
            setDisplayedDetails([]);
            setDisplayedDetailsTitle('');
            return;
        }

        const campaignDocRef = doc(dbRef.current, `artifacts/${appId}/public/data/campaigns`, selectedCampaignId);

        const unsubscribe = onSnapshot(campaignDocRef, (docSnapshot) => {
            if (docSnapshot.exists()) {
                const campaign = docSnapshot.data();
                let opened = [];
                let clicked = [];
                let received = [];
                let replied = [];
                let bounced = [];

                if (campaign.interactions && Array.isArray(campaign.interactions)) {
                    campaign.interactions.forEach(interaction => {
                        const emailData = {
                            email: interaction.email || 'N/A',
                            firstName: interaction.firstName || 'N/A',
                            lastName: interaction.lastName || 'N/A',
                            timestamp: interaction.timestamp ? new Date(interaction.timestamp).toLocaleString() : 'N/A'
                        };

                        if (interaction.type === 'opened') opened.push(emailData);
                        if (interaction.type === 'clicked') clicked.push(emailData);
                        if (interaction.type === 'received') received.push(emailData);
                        if (interaction.type === 'replied') replied.push(emailData);
                        if (interaction.type === 'bounced') bounced.push(emailData);
                    });
                }

                setOpenedEmails(opened);
                setClickedEmails(clicked);
                setReceivedEmails(received);
                setRepliedEmails(replied);
                setBouncedEmails(bounced);

                // If no specific details are displayed, default to 'Who Opened' for the new campaign
                if (displayedDetailsTitle === 'Who Opened' || displayedDetails.length === 0) {
                    setDisplayedDetails(opened);
                    setDisplayedDetailsTitle('Who Opened');
                } else if (displayedDetailsTitle === 'Who Clicked') {
                    setDisplayedDetails(clicked);
                } else if (displayedDetailsTitle === 'Who Received' || displayedDetailsTitle === 'Total Mails Sent') {
                    setDisplayedDetails(received);
                } else if (displayedDetailsTitle === 'Who Replied') {
                    setDisplayedDetails(replied);
                } else if (displayedDetailsTitle === 'Which Bounced') {
                    setDisplayedDetails(bounced);
                }

            } else {
                console.log(`Campaign ${selectedCampaignId} does not exist.`);
                setOpenedEmails([]);
                setClickedEmails([]);
                setReceivedEmails([]);
                setRepliedEmails([]);
                setBouncedEmails([]);
                setDisplayedDetails([]);
                setDisplayedDetailsTitle('');
            }
        }, (error) => {
            console.error(`Error listening to campaign ${selectedCampaignId}:`, error);
            showMessage(`Error fetching campaign data: ${error.message}`, "error");
        });

        return () => unsubscribe();
    }, [dbRef.current, selectedCampaignId, displayedDetailsTitle]); // Re-run if db or selectedCampaignId changes

    // Helper to render the details table
    const renderDetailsTable = (details, title) => {
        if (details.length === 0) {
            return <p className="text-gray-400 italic">No data to display for {title}.</p>;
        }

        // Determine if the title should be purple
        const isPurpleTitle = ['Who Opened', 'Who Clicked', 'Who Received', 'Which Bounced', 'Total Mails Sent', 'Who Replied'].includes(title);
        const titleColorClass = isPurpleTitle ? 'text-purple-400' : 'text-white';

        return (
            <div className="mt-4 text-gray-200 text-sm max-h-80 overflow-y-auto custom-scrollbar">
                <h3 className={`text-xl font-semibold mb-3 ${titleColorClass}`}>{title} Details</h3>
                <table className="min-w-full divide-y divide-gray-700">
                    <thead className="bg-gray-800">
                        <tr>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-purple-400 uppercase tracking-wider">
                                First Name
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-purple-400 uppercase tracking-wider">
                                Last Name
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-purple-400 uppercase tracking-wider">
                                Email
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-purple-400 uppercase tracking-wider">
                                Timestamp
                            </th>
                        </tr>
                    </thead>
                    <tbody className="bg-gray-900 divide-y divide-gray-700">
                        {details.map((data, index) => (
                            <tr key={index}>
                                <td className="px-6 py-2 whitespace-nowrap">{data.firstName}</td>
                                <td className="px-6 py-2 whitespace-nowrap">{data.lastName}</td>
                                <td className="px-6 py-2 whitespace-nowrap">{data.email}</td>
                                <td className="px-6 py-2 whitespace-nowrap">{data.timestamp}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
                <div className="mt-4 flex justify-end">
                    <button
                        onClick={() => downloadCSV(details, title.replace(/\s/g, '_').toLowerCase())}
                        className="bg-blue-600 text-white px-5 py-2 rounded-md shadow-md hover:bg-blue-700 transition-colors duration-200"
                    >
                        Download Current Data CSV
                    </button>
                </div>
            </div>
        );
    };

    // Function to log interaction to Firestore - Removed as per user request
    // const logInteraction = async (event) => { ... };

    const getMessageBoxClasses = () => {
        let classes = "mt-4 text-center text-sm p-3 rounded-md";
        if (message.text === '') {
            classes += ' hidden';
        } else if (message.type === 'error') {
            classes += ' bg-red-800 text-red-100'; // Darker red for dark theme
        } else if (message.type === 'success') {
            classes += ' bg-green-800 text-green-100'; // Darker green for dark theme
        } else {
            classes += ' bg-blue-800 text-blue-100'; // Darker blue for dark theme
        }
        return classes;
    };

    // Function to download data as CSV
    const downloadCSV = (data, filename) => {
        if (data.length === 0) {
            showMessage('No data to download.', 'info');
            return;
        }

        // Define CSV headers
        const headers = ["First Name", "Last Name", "Email", "Timestamp"];

        // Map data to CSV rows
        const csvRows = data.map(row =>
            [row.firstName, row.lastName, row.email, row.timestamp].map(field =>
                `"${String(field).replace(/"/g, '""')}"` // Escape double quotes and wrap in quotes
            ).join(',')
        );

        const csvContent = "data:text/csv;charset=utf-8,"
            + headers.join(',') + "\n"
            + csvRows.join("\n");

        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", `${filename}.csv`);
        document.body.appendChild(link); // Required for Firefox
        link.click();
        document.body.removeChild(link); // Clean up
        showMessage(`Downloading ${filename}.csv`, 'success');
    };


    return (
        <div className="min-h-screen flex flex-col bg-gray-950 text-gray-100"> {/* Main background set to dark */}
            <header className="bg-gradient-to-r from-blue-700 to-purple-800 text-white p-6 shadow-lg"> {/* Adjusted gradient for dark theme */}
                <div className="container mx-auto flex justify-between items-center">
                    <h1 className="text-3xl font-bold">Campaign Management Dashboard</h1>
                    <div id="user-info" className="text-sm bg-blue-800 px-3 py-1 rounded-full shadow-md"> {/* Adjusted user info background */}
                        User ID: {userId}
                    </div>
                </div>
            </header>

            <main className="flex-grow container mx-auto p-6">
                {/* Main content area - removed border */}
                <div className="rounded-xl shadow-lg overflow-hidden bg-gray-900">
                    {/* Tabs Navigation */}
                    <nav className="flex border-b border-gray-700 bg-gray-800"> {/* Darker nav background and border */}
                        <button
                            className={`tab-button px-6 py-3 text-lg font-medium text-gray-300 hover:text-blue-400 hover:bg-gray-700 focus:outline-none transition-all duration-200 ${activeTab === 'campaign-analytics' ? 'active-tab border-b-2 border-blue-500 text-blue-400 bg-gray-700' : ''}`}
                            onClick={() => setActiveTab('campaign-analytics')}
                        >
                            Campaign Analytics
                        </button>
                        <button
                            className={`tab-button px-6 py-3 text-lg font-medium text-gray-300 hover:text-blue-400 hover:bg-gray-700 focus:outline-none transition-all duration-200 ${activeTab === 'ab-testing' ? 'active-tab border-b-2 border-blue-500 text-blue-400 bg-gray-700' : ''}`}
                            onClick={() => setActiveTab('ab-testing')}
                        >
                            AB Testing
                        </button>
                    </nav>

                    {/* Tab Content */}
                    <div id="tab-content" className="p-6">
                        {/* Campaign Analytics Tab Content */}
                        {activeTab === 'campaign-analytics' && (
                            <div id="campaign-analytics" className="tab-pane">
                                <h2 className="text-2xl font-semibold text-purple-400 mb-6">Campaign Analytics</h2> {/* Changed to purple-400 */}
                                <p className="text-gray-300 mb-8">Track opens, clicks, replies, and bounces directly within Gmail.</p>

                                {/* Campaign Selection Dropdown with Search - removed border */}
                                <div className="mb-6 p-4 rounded-lg shadow-inner bg-gray-800">
                                    <label htmlFor="campaign-search" className="block text-lg font-medium text-purple-400 mb-2"> {/* Changed to purple-400 */}
                                        Search Campaigns:
                                    </label>
                                    <input
                                        type="text"
                                        id="campaign-search"
                                        placeholder="Search campaign names..."
                                        className="mb-4 block w-full pl-3 pr-10 py-2 text-base border border-gray-600 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md shadow-sm bg-gray-700 text-white placeholder-gray-400"
                                        value={searchQuery}
                                        onChange={(e) => setSearchQuery(e.target.value)}
                                    />

                                    <label htmlFor="campaign-select" className="block text-lg font-medium text-purple-400 mb-2"> {/* Changed to purple-400 */}
                                        Choose Campaign:
                                    </label>
                                    <select
                                        id="campaign-select"
                                        className="mt-1 block w-full pl-3 pr-10 py-2 text-base border border-gray-600 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md shadow-sm bg-gray-700 text-white"
                                        value={selectedCampaignId}
                                        onChange={(e) => {
                                            const newId = e.target.value;
                                            setSelectedCampaignId(newId);
                                            const selectedCamp = campaigns.find(c => c.id === newId);
                                            setSelectedCampaignName(selectedCamp ? selectedCamp.name : 'Select a Campaign');
                                        }}
                                    >
                                        <option value="">Select a Campaign</option>
                                        {filteredCampaigns.map(campaign => (
                                            <option key={campaign.id} value={campaign.id}>
                                                {campaign.name}
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                {selectedCampaignId ? (
                                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                        {/* Who Opened Card - Re-added color card background and border */}
                                        <div className="p-5 rounded-lg shadow-md bg-blue-900 border border-blue-700 text-blue-100">
                                            <h3 className="text-xl font-medium text-blue-300 mb-3 flex items-center">
                                                <MailOpen className="mr-2" size={24} /> Who Opened
                                            </h3>
                                            <p className="text-3xl font-bold text-blue-200">{openedEmails.length}</p>
                                            <button
                                                onClick={() => {
                                                    setDisplayedDetails(openedEmails);
                                                    setDisplayedDetailsTitle('Who Opened');
                                                }}
                                                className="mt-2 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors duration-200 text-sm"
                                            >
                                                View Details
                                            </button>
                                        </div>

                                        {/* Who Clicked Card - Re-added color card background and border */}
                                        <div className="p-5 rounded-lg shadow-md bg-green-900 border border-green-700 text-green-100">
                                            <h3 className="text-xl font-medium text-green-300 mb-3 flex items-center">
                                                <MousePointerClick className="mr-2" size={24} /> Who Clicked
                                            </h3>
                                            <p className="text-3xl font-bold text-green-200">{clickedEmails.length}</p>
                                            <button
                                                onClick={() => {
                                                    setDisplayedDetails(clickedEmails);
                                                    setDisplayedDetailsTitle('Who Clicked');
                                                }}
                                                className="mt-2 bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 transition-colors duration-200 text-sm"
                                            >
                                                View Details
                                            </button>
                                        </div>

                                        {/* Who Received Card - Re-added color card background and border */}
                                        <div className="p-5 rounded-lg shadow-md bg-purple-900 border border-purple-700 text-purple-100">
                                            <h3 className="text-xl font-medium text-purple-300 mb-3 flex items-center">
                                                <Mail className="mr-2" size={24} /> Who Received
                                            </h3>
                                            <p className="text-3xl font-bold text-purple-200">{receivedEmails.length}</p>
                                            <button
                                                onClick={() => {
                                                    setDisplayedDetails(receivedEmails);
                                                    setDisplayedDetailsTitle('Who Received');
                                                }}
                                                className="mt-2 bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700 transition-colors duration-200 text-sm"
                                            >
                                                View Details
                                            </button>
                                        </div>

                                        {/* Who Replied Card - Re-added color card background and border */}
                                        <div className="p-5 rounded-lg shadow-md bg-yellow-900 border border-yellow-700 text-yellow-100">
                                            <h3 className="text-xl font-medium text-yellow-300 mb-3 flex items-center">
                                                <MessageSquareText className="mr-2" size={24} /> Who Replied
                                            </h3>
                                            <p className="text-3xl font-bold text-yellow-200">{repliedEmails.length}</p>
                                            <button
                                                onClick={() => {
                                                    setDisplayedDetails(repliedEmails);
                                                    setDisplayedDetailsTitle('Who Replied');
                                                }}
                                                className="mt-2 bg-yellow-600 text-white px-4 py-2 rounded-md hover:bg-yellow-700 transition-colors duration-200 text-sm"
                                            >
                                                View Details
                                            </button>
                                        </div>

                                        {/* Which Bounced Card - Re-added color card background and border */}
                                        <div className="p-5 rounded-lg shadow-md bg-red-900 border border-red-700 text-red-100">
                                            <h3 className="text-xl font-medium text-red-300 mb-3 flex items-center">
                                                <Ban className="mr-2" size={24} /> Which Bounced
                                            </h3>
                                            <p className="text-3xl font-bold text-red-200">{bouncedEmails.length}</p>
                                            <button
                                                onClick={() => {
                                                    setDisplayedDetails(bouncedEmails);
                                                    setDisplayedDetailsTitle('Which Bounced');
                                                }}
                                                className="mt-2 bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors duration-200 text-sm"
                                            >
                                                View Details
                                            </button>
                                        </div>

                                        {/* Total Mails Sent Card - Re-added color card background and border */}
                                        <div className="p-5 rounded-lg shadow-md bg-indigo-900 border border-indigo-700 text-indigo-100">
                                            <h3 className="text-xl font-medium text-indigo-300 mb-3 flex items-center">
                                                <Send className="mr-2" size={24} /> Total Mails Sent
                                            </h3>
                                            <p className="text-3xl font-bold text-indigo-200">{receivedEmails.length}</p>
                                            <button
                                                onClick={() => {
                                                    setDisplayedDetails(receivedEmails);
                                                    setDisplayedDetailsTitle('Total Mails Sent');
                                                }}
                                                className="mt-2 bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors duration-200 text-sm"
                                            >
                                                View Details
                                            </button>
                                        </div>
                                    </div>
                                ) : (
                                    <p className="text-gray-400 text-center text-lg mt-10">Please select a campaign from the dropdown above to view analytics.</p>
                                )}


                                {/* Dynamic Details Table */}
                                {selectedCampaignId && displayedDetails.length > 0 && (
                                    <div className="mt-8 p-6 bg-gray-800 rounded-lg border border-gray-700 shadow-md"> {/* Darker table container */}
                                        {renderDetailsTable(displayedDetails, displayedDetailsTitle)}
                                    </div>
                                )}

                            </div>
                        )}

                        {/* AB Testing Tab Content */}
                        {activeTab === 'ab-testing' && (
                            <div id="ab-testing" className="tab-pane">
                                <h2 className="text-2xl font-semibold text-purple-400 mb-6">AB Testing</h2> {/* Changed to purple-400 */}
                                <p className="text-gray-300 leading-relaxed">
                                    Test variations within campaigns to optimize performance. Experiment with different subject lines,
                                    call-to-actions, email content, and send times to discover what resonates best with your audience.
                                </p>
                                {/* AB Testing content - Re-added color card background and border */}
                                <div className="p-5 rounded-lg shadow-md bg-yellow-900 border border-yellow-700">
                                    <h3 className="text-xl font-medium text-yellow-300 mb-3">What you can A/B Test:</h3>
                                    <ul className="list-disc list-inside text-gray-200 space-y-2">
                                        <li>Subject Lines</li>
                                        <li>Email Content (body text, images, layout)</li>
                                        <li>Call-to-Action (CTA) buttons</li>
                                        <li>Send Times and Days</li>
                                        <li>Sender Name</li>
                                    </ul>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </main>

            <footer className="bg-gray-900 text-gray-400 p-4 text-center text-sm shadow-inner mt-8"> {/* Darker footer */}
                <div className="container mx-auto">
                    &copy; 2024 Campaign Management Dashboard. All rights reserved.
                </div>
            </footer>
        </div>
    );
}

export default App;
