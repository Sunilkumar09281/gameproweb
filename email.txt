// EmailCampaignPage.jsx
import React, { useState, useEffect } from 'react';
// Removed: import './EmailCampaignPage.css'; // Import the CSS file

const EmailCampaignPage = () => {
  // State for campaign details
  const [campaignName, setCampaignName] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState('');
  const [recipientCount, setRecipientCount] = useState(100);
  
  // State for data loading and messages
  const [templates, setTemplates] = useState([]);
  const [existingCampaigns, setExistingCampaigns] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [successMessage, setSuccessMessage] = useState('');
  const [errorMessage, setErrorMessage] = useState('');

  // State for managing UI mode (create new vs. edit existing)
  const [mode, setMode] = useState('create'); // 'create' or 'edit'
  const [selectedCampaignToEdit, setSelectedCampaignToEdit] = useState(''); // ID of campaign being edited

  // Fetch previous email templates and existing campaigns (mock data for example)
  useEffect(() => {
    // Simulate API call for templates
    const mockTemplates = [
      { id: '1', name: 'Summer Sale 2023', subject: '50% Off All Products!' },
      { id: '2', name: 'Welcome Series #1', subject: 'Welcome to Our Community!' },
      { id: '3', name: 'Holiday Special', subject: 'Limited Time Holiday Offers' },
      { id: '4', name: 'Product Launch', subject: 'Introducing Our New Line!' },
      { id: '5', name: 'Winter Collection', subject: 'Cozy Up with Our New Arrivals!' },
      { id: '6', name: 'Spring Refresh', 'subject': 'Fresh Styles for the New Season' },
      { id: '7', name: 'Customer Appreciation', subject: 'A Special Thank You!' },
      { id: '8', name: 'Flash Sale Alert', subject: 'Don\'t Miss Out - Limited Time!' },
      { id: '9', name: 'New Blog Post', subject: 'Read Our Latest Insights!' },
      { id: '10', name: 'Event Invitation', subject: 'Join Us for Our Upcoming Webinar!' },
    ];
    
    // Simulate API call for existing campaigns
    const mockExistingCampaigns = [
      { id: 'camp1', name: 'Q1 Newsletter', templateId: '2', recipientCount: 500 },
      { id: 'camp2', name: 'Black Friday Promo', templateId: '1', recipientCount: 1200 },
      { id: 'camp3', name: 'New User Onboarding', templateId: '2', recipientCount: 300 },
      { id: 'camp4', name: 'Cyber Monday Deals', templateId: '1', recipientCount: 1500 },
      { id: 'camp5', name: 'March Madness Promo', templateId: '3', recipientCount: 750 },
      { id: 'camp6', name: 'April Newsletter', templateId: '2', recipientCount: 600 },
      { id: 'camp7', name: 'Summer Collection Launch', templateId: '4', recipientCount: 900 },
      { id: 'camp8', name: 'Back to School Sale', templateId: '1', recipientCount: 1100 },
      { id: 'camp9', name: 'Halloween Spooktacular', templateId: '3', recipientCount: 400 },
      { id: 'camp10', name: 'End of Year Clearance', templateId: '1', recipientCount: 1800 },
      { id: 'camp11', name: 'New Year, New Goals', templateId: '2', recipientCount: 700 },
      { id: 'camp12', name: 'Valentine\'s Day Special', templateId: '3', recipientCount: 350 },
    ];

    setTimeout(() => {
      setTemplates(mockTemplates);
      setExistingCampaigns(mockExistingCampaigns);
      setIsLoading(false);
    }, 1000);
  }, []);

  // Effect to populate form when an existing campaign is selected for editing
  useEffect(() => {
    if (mode === 'edit' && selectedCampaignToEdit) {
      const campaign = existingCampaigns.find(c => c.id === selectedCampaignToEdit);
      if (campaign) {
        setCampaignName(campaign.name);
        setSelectedTemplate(campaign.templateId);
        setRecipientCount(campaign.recipientCount);
      }
    } else if (mode === 'create') {
      // Clear form fields when switching to create mode
      setCampaignName('');
      setSelectedTemplate('');
      setRecipientCount(100);
      setSelectedCampaignToEdit('');
    }
  }, [mode, selectedCampaignToEdit, existingCampaigns]);

  // Handle form submission (create or update)
  const handleSubmit = (e) => {
    e.preventDefault();
    setSuccessMessage('');
    setErrorMessage('');

    if (!campaignName || !selectedTemplate || !recipientCount) {
      setErrorMessage('Please fill in all required fields.');
      return;
    }

    if (mode === 'create') {
      // Simulate creating a new campaign
      const newCampaign = {
        id: `camp${existingCampaigns.length + 1}`, // Simple ID generation
        name: campaignName,
        templateId: selectedTemplate,
        recipientCount: parseInt(recipientCount),
      };
      setExistingCampaigns([...existingCampaigns, newCampaign]);
      setSuccessMessage(`New campaign "${campaignName}" created successfully! Sending to ${recipientCount} members.`);
      console.log('New Campaign Created:', newCampaign);
    } else {
      // Simulate updating an existing campaign
      const updatedCampaigns = existingCampaigns.map(camp => 
        camp.id === selectedCampaignToEdit 
          ? { ...camp, name: campaignName, templateId: selectedTemplate, recipientCount: parseInt(recipientCount) }
          : camp
      );
      setExistingCampaigns(updatedCampaigns);
      setSuccessMessage(`Campaign "${campaignName}" updated successfully!`);
      console.log('Campaign Updated:', { id: selectedCampaignToEdit, name: campaignName, templateId: selectedTemplate, recipientCount: parseInt(recipientCount) });
    }

    // Clear form after submission (optional, depending on desired UX)
    setCampaignName('');
    setSelectedTemplate('');
    setRecipientCount(100);
    setSelectedCampaignToEdit('');
    setMode('create'); // Switch back to create mode after action

    setTimeout(() => setSuccessMessage(''), 5000);
    setTimeout(() => setErrorMessage(''), 5000);
  };

  // Handle switching to create new campaign mode
  const handleNewCampaign = () => {
    setMode('create');
    setSuccessMessage('');
    setErrorMessage('');
  };

  // Handle selection of an existing campaign to edit
  const handleEditCampaignSelect = (e) => {
    const campaignId = e.target.value;
    setSelectedCampaignToEdit(campaignId);
    if (campaignId) {
      setMode('edit');
    } else {
      setMode('create'); // If "Select a campaign" is chosen, switch to create
    }
    setSuccessMessage('');
    setErrorMessage('');
  };

  return (
    <div className="min-h-screen bg-blue-50 flex items-center justify-center p-4 font-sans">
      <div className="bg-white p-8 rounded-lg shadow-xl w-full max-w-2xl">
        <h1 className="text-3xl font-extrabold text-gray-800 mb-6 text-center">
          Email Campaign Manager
        </h1>

        {/* Mode Selection */}
        <div className="mb-6 flex justify-center space-x-4">
          <button
            onClick={handleNewCampaign}
            className={`px-6 py-3 rounded-full font-semibold transition duration-300 ease-in-out 
              ${mode === 'create' ? 'bg-blue-600 text-white shadow-md' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
          >
            Create New Campaign
          </button>
          <div className="relative">
            <select
              value={selectedCampaignToEdit}
              onChange={handleEditCampaignSelect}
              className={`block w-full px-6 py-3 rounded-full appearance-none pr-10 cursor-pointer 
                font-semibold transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500
                ${mode === 'edit' ? 'bg-blue-600 text-white shadow-md' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
              disabled={isLoading}
            >
              <option value="">{isLoading ? 'Loading campaigns...' : 'Load Existing Campaign'}</option>
              {existingCampaigns.map(campaign => (
                <option key={campaign.id} value={campaign.id}>
                  {campaign.name}
                </option>
              ))}
            </select>
            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
              {/* Dropdown arrow icon */}
              <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
              </svg>
            </div>
          </div>
        </div>

        {/* Form Section */}
        <form onSubmit={handleSubmit} className="space-y-5">
          {/* Campaign Name */}
          <div>
            <label htmlFor="campaignName" className="block text-sm font-medium text-gray-700 mb-1">
              Campaign Name
            </label>
            <input
              type="text"
              id="campaignName"
              value={campaignName}
              onChange={(e) => setCampaignName(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-150 ease-in-out"
              required
            />
          </div>
          
          {/* Number of Recipients */}
          <div>
            <label htmlFor="recipientCount" className="block text-sm font-medium text-gray-700 mb-1">
              Number of Recipients
            </label>
            <input
              type="number"
              id="recipientCount"
              value={recipientCount}
              onChange={(e) => setRecipientCount(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-150 ease-in-out"
              min="1"
              required
            />
          </div>
          
          {/* Choose Previous Email Template */}
          <div>
            <label htmlFor="emailTemplate" className="block text-sm font-medium text-gray-700 mb-1">
              Choose Email Template
            </label>
            {isLoading ? (
              <div className="text-gray-500 py-2">Loading templates...</div>
            ) : (
              <select
                id="emailTemplate"
                value={selectedTemplate}
                onChange={(e) => setSelectedTemplate(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 transition duration-150 ease-in-out"
                required
              >
                <option value="">Select a template</option>
                {templates.map(template => (
                  <option key={template.id} value={template.id}>
                    {template.name} - {template.subject}
                  </option>
                ))}
              </select>
            )}
          </div>
          
          {/* Submit Button */}
          <button
            type="submit"
            className="w-full bg-green-600 text-white py-3 rounded-md font-bold text-lg hover:bg-green-700 transition duration-300 ease-in-out shadow-lg"
            disabled={isLoading}
          >
            {mode === 'create' ? 'Create Campaign' : 'Update Campaign'}
          </button>
        </form>

        {/* Messages */}
        {successMessage && (
          <div className="mt-6 p-4 bg-green-100 text-green-800 rounded-md text-center font-medium shadow-sm">
            {successMessage}
          </div>
        )}
        {errorMessage && (
          <div className="mt-6 p-4 bg-red-100 text-red-800 rounded-md text-center font-medium shadow-sm">
            {errorMessage}
          </div>
        )}
      </div>
    </div>
  );
};

export default EmailCampaignPage;
